
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.10.0
 * Query Engine version: ca7fcef713137fa11029d519a9780db130cca91d
 */
Prisma.prismaVersion = {
  client: "4.10.0",
  engine: "ca7fcef713137fa11029d519a9780db130cca91d"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val


/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.CreationScalarFieldEnum = makeEnum({
  creation_id: 'creation_id',
  video_url: 'video_url',
  video_id: 'video_id',
  video_duration: 'video_duration',
  createdAt: 'createdAt',
  userId: 'userId'
});

exports.Prisma.ProductScalarFieldEnum = makeEnum({
  product_id: 'product_id',
  priceId: 'priceId',
  name: 'name',
  description: 'description',
  price: 'price',
  currency: 'currency',
  type: 'type',
  interval: 'interval'
});

exports.Prisma.PurchaseScalarFieldEnum = makeEnum({
  purchase_id: 'purchase_id',
  priceId: 'priceId',
  priceName: 'priceName',
  purchasedAt: 'purchasedAt',
  stripeCustomerId: 'stripeCustomerId',
  userId: 'userId'
});

exports.Prisma.ReviewScalarFieldEnum = makeEnum({
  review_id: 'review_id',
  planName: 'planName',
  productName: 'productName',
  productReview: 'productReview',
  reviewedAt: 'reviewedAt',
  userId: 'userId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  password: 'password',
  fullname: 'fullname',
  profilePicture: 'profilePicture',
  profilePictureId: 'profilePictureId',
  stripeCustomerId: 'stripeCustomerId',
  hadTrial: 'hadTrial',
  onTrial: 'onTrial',
  trialStartAt: 'trialStartAt',
  isSubscribed: 'isSubscribed',
  productSubscribed: 'productSubscribed',
  currentPeriodStart: 'currentPeriodStart'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Creation: 'Creation',
  Product: 'Product',
  Purchase: 'Purchase',
  Review: 'Review'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
