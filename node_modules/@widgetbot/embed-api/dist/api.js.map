{"version":3,"file":"api.js","sourceRoot":"","sources":["../src/api.ts"],"names":[],"mappings":";;AAAA,MAAe,GAAG;IAAlB;QAEE,cAAS,GAAG,EAEX,CAAA;IAuDH,CAAC;IArDW,WAAW,CAAC,GAAW;QAC/B,IAAI;YACF,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;SAC9B;QAAC,OAAO,CAAC,EAAE;YACV,OAAM;SACP;QAED,IACE,OAAO,YAAY,MAAM;YACzB,OAAO,CAAC,SAAS,KAAK,IAAI;YAC1B,OAAO,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,EACtB;YACA,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,OAAO,CAAA;YAC/B,MAAM,SAAS,GAAe,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;YAEnD,IAAI,SAAS,EAAE;gBACb,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;aAC9C;SACF;IACH,CAAC;IAED;;;;OAIG;IACI,EAAE,CACP,KAAQ,EACR,QAAmC;QAEnC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,CAAA;QAEtD,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACvC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAA;QAExB,OAAO,CAAC,KAAK,CAAC,mBAAmB,KAAK,GAAG,EAAE,QAAQ,CAAC,CAAA;IACtD,CAAC;IAED;;;;OAIG;IACI,cAAc,CACnB,KAAQ,EACR,QAAmC;QAEnC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YAAE,OAAM;QAElC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;QAE1E,OAAO,CAAC,KAAK,CAAC,+BAA+B,KAAK,GAAG,EAAE,QAAQ,CAAC,CAAA;IAClE,CAAC;CACF;AAED,kBAAe,GAAG,CAAA","sourcesContent":["abstract class API<Events extends Object> {\r\n  id: string\r\n  listeners = {} as {\r\n    [event in keyof Events]: ((data: Events[event]) => void)[]\r\n  }\r\n\r\n  protected socketEvent(raw: string) {\r\n    try {\r\n      var message = JSON.parse(raw)\r\n    } catch (e) {\r\n      return\r\n    }\r\n\r\n    if (\r\n      message instanceof Object &&\r\n      message.widgetbot === true &&\r\n      message.id === this.id\r\n    ) {\r\n      const { event, data } = message\r\n      const listeners: Function[] = this.listeners[event]\r\n\r\n      if (listeners) {\r\n        listeners.forEach(listener => listener(data))\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Listens to events from the client\r\n   * @param event Event name\r\n   * @param callback Event callback\r\n   */\r\n  public on<T extends keyof Events>(\r\n    event: T,\r\n    callback: (data: Events[T]) => void\r\n  ) {\r\n    if (!this.listeners[event]) this.listeners[event] = []\r\n\r\n    const listeners = this.listeners[event]\r\n    listeners.push(callback)\r\n\r\n    console.debug(`[embed-api] on '${event}'`, callback)\r\n  }\r\n\r\n  /**\r\n   * Remove a listener from an event from the client\r\n   * @param event Event name\r\n   * @param callback Event callback\r\n   */\r\n  public removeListener<T extends keyof Events>(\r\n    event: T,\r\n    callback: (data: Events[T]) => void\r\n  ) {\r\n    if (!this.listeners[event]) return\r\n\r\n    this.listeners[event] = this.listeners[event].filter(x => x === callback);\r\n\r\n    console.debug(`[embed-api] removeListener '${event}'`, callback)\r\n  }\r\n}\r\n\r\nexport default API\r\n"]}