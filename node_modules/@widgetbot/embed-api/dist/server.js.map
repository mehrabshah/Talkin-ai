{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";;AAAA,+BAAuB;AAGvB,MAAM,MAAO,SAAQ,aAAmB;IAGtC,YAAY,OAAwB;QAClC,KAAK,EAAE,CAAA;QAHT,iBAAY,GAAG,GAAG,CAAA;QA+BX,WAAM,GAAG;YACd,IAAI,EAAE,CAA0B,KAAQ,EAAE,IAAuB,EAAE,EAAE;gBACnE,MAAM,SAAS,GAAe,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;gBAEnD,IAAI,SAAS,EAAE;oBACb,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;iBAC9C;YACH,CAAC;SACF,CAAA;QAnCC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAA;QAE5B,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;IAC1E,CAAC;IAED;;;;OAIG;IACI,IAAI,CAA0B,KAAQ,EAAE,IAAuB;QACpE,OAAO,CAAC,KAAK,CAAC,qBAAqB,KAAK,GAAG,EAAE,IAAI,CAAC,CAAA;QAElD,IAAI,CAAC,MAAM,CAAC,MAAM;YAAE,OAAO,KAAK,CAAA;QAEhC,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC;YAC5B,SAAS,EAAE,IAAI;YACf,EAAE,EAAE,IAAI,CAAC,EAAE;YACX,KAAK;YACL,IAAI;SACL,CAAC,CAAA;QAEF,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,CAAC,YAAY,CAAC,CAAA;QAEpD,OAAO,IAAI,CAAA;IACb,CAAC;CAWF;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import API from './api'\r\nimport { IClient, IServer } from './types'\r\n\r\nclass Server extends API<IClient.Events> {\r\n  targetOrigin = '*'\r\n\r\n  constructor(options: IServer.Options) {\r\n    super()\r\n    Object.assign(this, options)\r\n\r\n    window.addEventListener('message', ({ data }) => this.socketEvent(data))\r\n  }\r\n\r\n  /**\r\n   * Emits an event to the client\r\n   * @param event Event name\r\n   * @param data Event data\r\n   */\r\n  public emit<T extends IServer.Event>(event: T, data: IServer.Events[T]) {\r\n    console.debug(`[embed-api] emit '${event}'`, data)\r\n\r\n    if (!window.parent) return false\r\n\r\n    const parsed = JSON.stringify({\r\n      widgetbot: true,\r\n      id: this.id,\r\n      event,\r\n      data\r\n    })\r\n\r\n    window.parent.postMessage(parsed, this.targetOrigin)\r\n\r\n    return true\r\n  }\r\n\r\n  public client = {\r\n    emit: <T extends IClient.Event>(event: T, data: IClient.Events[T]) => {\r\n      const listeners: Function[] = this.listeners[event]\r\n\r\n      if (listeners) {\r\n        listeners.forEach(listener => listener(data))\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default Server\r\n"]}